<%@page import="com.fasterxml.jackson.databind.ObjectMapper"%>
<%@page import="com.fasterxml.jackson.databind.node.ObjectNode"%>
<%@page import="ca.openosp.openo.utility.SpringUtils"%>
<%@page import="ca.openosp.openo.commn.dao.ServiceClientDao"%>
<%@page import="ca.openosp.openo.commn.model.ServiceClient"%>
<%@page import="ca.openosp.openo.commn.dao.ServiceAccessTokenDao"%>
<%@page import="ca.openosp.openo.commn.model.ServiceAccessToken"%>
<%@page import="java.util.List"%>

<%
	ServiceClientDao serviceClientDao = SpringUtils.getBean(ServiceClientDao.class);
	ServiceAccessTokenDao serviceAccessTokenDao = SpringUtils.getBean(ServiceAccessTokenDao.class);
%>
<%
	boolean success = false;
    String error = "";
	String method = request.getParameter("method");

	ObjectMapper mapper = new ObjectMapper();
	ObjectNode json = mapper.createObjectNode();
	json.put("method", method);

	if ("add".equals(method)) {
		String valNew = request.getParameter("name");
		String uri = request.getParameter("uri");
		String lifetime = request.getParameter("lifetime");
		
		json.put("name", valNew);
		
		if (valNew.equals("")) {
			success = false;
			error = "Add Failure: Cannot add Client with empty value.";
		} else {
		
			ServiceClient t = serviceClientDao.findByName(valNew);
			if(t != null) {
				success = false;
				error = "Add Failure: Could not add entry to database.Name already being used.";
			} else {
				ServiceClient sc = new ServiceClient();
				sc.setName(valNew);
				sc.setKey(randomString(16,"0123456789abcdefghijklmnopqrstuvwxyz"));
				sc.setSecret(randomString(16,"0123456789abcdefghijklmnopqrstuvwxyz"));
				sc.setUri(uri);
				try {
				sc.setLifetime(Integer.parseInt(lifetime));
				}catch(Exception e) {
					sc.setLifetime(0);
				}
				serviceClientDao.persist(sc);
				
				int j = sc.getId();
				if (j==0) {		
					success = false;
					error = "Add Failure: Could not add entry to database.";
				} else {
					success = true;		
				}
			}
		}
	}
	else if ("delete".equals(method)) {
		String id = request.getParameter("id");
		
		json.put("id", id);
		
		if (id.equals("")) {
			success = false;
			error = "Add Failure: Cannot remove Client with empty id.";
		} else {
			serviceClientDao.remove(Integer.parseInt(id));
			success=true;
		}
	}
	else if("list".equals(method)) {
		List<ServiceClient> clients = serviceClientDao.findAll();
		response.setContentType("application/json");
        response.getWriter().print(mapper.writeValueAsString(clients));
	}
	else if("listTokens".equals(method)) {
		List<ServiceAccessToken> tokens = serviceAccessTokenDao.findAll();
		response.setContentType("application/json");
        response.getWriter().print(mapper.writeValueAsString(tokens));
	}
	else {
		success = false;
		error = "Invalid method supplied.";
	}
	if(!"list".equals(method) && !"listTokens".equals(method)) {
	    response.setContentType("application/json");

		json.put("success", success);
		json.put("error", error);

	    out.print(mapper.writeValueAsString(json));
	}
%>

<%!
public String randomString(int length, String chars) {
	    String result = "";
	    for (int i = length; i > 0; --i) 
	    result += chars.charAt((int)(Math.round(Math.random() * (chars.length() - 1))));
	    return result;
	}
	
%>