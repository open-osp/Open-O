<%@page import="com.fasterxml.jackson.databind.ObjectMapper"%>
<%@page import="com.fasterxml.jackson.databind.node.ObjectNode"%>
<%@page import="ca.openosp.openo.utility.SpringUtils"%>
<%@ page import="ca.openosp.openo.commn.dao.ServiceRequestTokenDao" %>
<%@ page import="ca.openosp.openo.commn.dao.ServiceAccessTokenDao" %>
<%@ page import="ca.openosp.openo.commn.dao.ServiceClientDao" %>
<%@ page import="ca.openosp.openo.commn.model.ServiceClient" %>
<%@ page import="ca.openosp.openo.commn.model.ServiceRequestToken" %>
<%@ page import="ca.openosp.openo.commn.model.ServiceAccessToken" %>
<%@page import="java.util.List"%>

<%
	ServiceClientDao serviceClientDao = SpringUtils.getBean(ServiceClientDao.class);
	ServiceRequestTokenDao serviceRequestTokenDao = SpringUtils.getBean(ServiceRequestTokenDao.class);
	ServiceAccessTokenDao serviceAccessTokenDao = SpringUtils.getBean(ServiceAccessTokenDao.class);
%>
<%
	boolean success = false;
    String error = "";
	String method = request.getParameter("method");

	ObjectMapper mapper = new ObjectMapper();
	ObjectNode json = mapper.createObjectNode();
	json.put("method", method);

	if ("deleteRequestToken".equals(method)) {
		String id = request.getParameter("id");
	
		json.put("id", id);
		
		if (id.equals("")) {
			success = false;
			error = "Cannot delete token with empty value.";
		} else {
			ServiceRequestToken srt = serviceRequestTokenDao.find(Integer.parseInt(id));
			if(srt != null) {
				serviceRequestTokenDao.remove(srt.getId());
				success=true;
			} else {
				success = false;
				error = "Token not found.";
			}
		}
	}
	
	else if ("deleteAccessToken".equals(method)) {
		String id = request.getParameter("id");
	
		json.put("id", id);
		
		if (id.equals("")) {
			success = false;
			error = "Cannot delete token with empty value.";
		} else {
			ServiceAccessToken sat = serviceAccessTokenDao.find(Integer.parseInt(id));
			if(sat != null) {
				serviceAccessTokenDao.remove(sat.getId());
				success=true;
			} else {
				success = false;
				error = "Token not found.";
			}
		}
	}
	else {
		success = false;
		error = "Invalid method supplied.";
	}
	
	    response.setContentType("application/json");

		json.put("success", success);
		json.put("error", error);

	    out.print(mapper.writeValueAsString(json));    	
	
%>

<%!
public String randomString(int length, String chars) {
	    String result = "";
	    for (int i = length; i > 0; --i) 
	    result += chars.charAt((int)(Math.round(Math.random() * (chars.length() - 1))));
	    return result;
	}
	
%>