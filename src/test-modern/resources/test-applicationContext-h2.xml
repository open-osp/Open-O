<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- Minimal H2 test configuration that works with the legacy DAO structure -->

    <!-- DataSource - H2 in-memory database in MySQL compatibility mode -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="org.h2.Driver" />
        <property name="url" value="jdbc:h2:mem:testdb;MODE=MySQL;DATABASE_TO_LOWER=TRUE;CASE_INSENSITIVE_IDENTIFIERS=TRUE;DB_CLOSE_DELAY=-1" />
        <property name="username" value="sa" />
        <property name="password" value="" />
        <property name="defaultAutoCommit" value="true" />
        <property name="maxActive" value="10" />
        <property name="maxIdle" value="5" />
        <property name="testOnBorrow" value="true" />
        <property name="validationQuery" value="SELECT 1" />
    </bean>

    <!-- Hibernate SessionFactory (used by legacy DAOs that extend HibernateDaoSupport) -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan">
            <list>
                <value>ca.openosp.openo.commn.model</value>
                <value>ca.openosp.openo.PMmodule.model</value>
                <value>ca.openosp.openo.billing.CA.model</value>
                <value>ca.openosp.openo.casemgmt.model</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">create</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <prop key="hibernate.jdbc.batch_size">20</prop>
            </props>
        </property>
    </bean>

    <!-- JPA EntityManagerFactory (for DAOs that extend AbstractDaoImpl) -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan">
            <list>
                <value>ca.openosp.openo.commn.model</value>
                <value>ca.openosp.openo.PMmodule.model</value>
                <value>ca.openosp.openo.billing.CA.model</value>
                <value>ca.openosp.openo.casemgmt.model</value>
            </list>
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="showSql" value="false" />
                <property name="generateDdl" value="true" />
                <property name="database" value="H2" />
            </bean>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">create</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
            </props>
        </property>
    </bean>

    <!-- JPA support -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

    <!-- Transaction Manager (use JPA transaction manager) -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

    <!-- Enable @Transactional support -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- DAO Beans -->
    <!-- DemographicDao uses SessionFactory -->
    <bean id="demographicDao" class="ca.openosp.openo.commn.dao.DemographicDaoImpl" autowire="byName">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <!-- TicklerDao uses JPA EntityManager -->
    <bean id="ticklerDao" class="ca.openosp.openo.commn.dao.TicklerDaoImpl" autowire="byName" />

    <!-- ProviderDao - check what it uses -->
    <bean id="providerDao" class="ca.openosp.openo.dao.ProviderDaoImpl" autowire="byName" />

    <!-- Manager Beans -->
    <bean id="ticklerManager" class="ca.openosp.openo.managers.impl.TicklerManagerImpl" autowire="byName" />

    <bean id="securityInfoManager" class="ca.openosp.openo.managers.SecurityInfoManager" autowire="byName" />

    <!-- JdbcTemplate for direct SQL operations in tests -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>

</beans>