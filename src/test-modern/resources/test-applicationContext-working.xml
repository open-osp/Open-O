<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- Working test configuration that mimics production setup -->

    <!-- Test properties -->
    <bean id="testPropertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties">
            <props>
                <prop key="db_driver">org.h2.Driver</prop>
                <prop key="db_uri">jdbc:h2:mem:testdb</prop>
                <prop key="db_name">;MODE=MySQL;DB_CLOSE_DELAY=-1</prop>
                <prop key="db_username">sa</prop>
                <prop key="db_password"></prop>
                <prop key="db_max_active">10</prop>
                <prop key="db_max_idle">5</prop>
                <prop key="db_max_wait">10000</prop>
                <prop key="db_validationQuery">SELECT 1</prop>
                <prop key="db_remove_abandoned">false</prop>
                <prop key="db_remove_abandoned_timeout">300</prop>
                <prop key="db_log_abandoned">false</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.generate_statistics">false</prop>
            </props>
        </property>
    </bean>

    <!-- DataSource - same structure as production but with H2 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${db_driver}" />
        <property name="url" value="${db_uri}${db_name}" />
        <property name="defaultAutoCommit" value="true" />
        <property name="username" value="${db_username}" />
        <property name="password" value="${db_password}" />
        <property name="maxActive" value="${db_max_active}" />
        <property name="maxIdle" value="${db_max_idle}" />
        <property name="maxWait" value="${db_max_wait}" />
        <property name="testOnBorrow" value="true" />
        <property name="validationQuery" value="${db_validationQuery}" />
        <property name="poolPreparedStatements" value="false" />
    </bean>

    <!-- Hibernate SessionFactory for DAOs that extend HibernateDaoSupport -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="annotatedClasses">
            <list>
                <!-- Only include the entities we actually need for tests -->
                <value>ca.openosp.openo.commn.model.Demographic</value>
                <value>ca.openosp.openo.commn.model.Tickler</value>
                <value>ca.openosp.openo.commn.model.Provider</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.hbm2ddl.auto">create</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <prop key="hibernate.max_fetch_depth">3</prop>
            </props>
        </property>
    </bean>

    <!-- JPA EntityManagerFactory - matches production structure -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="persistenceUnitName" value="testPersistenceUnit" />
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
                <prop key="hibernate.hbm2ddl.auto">create</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <prop key="hibernate.max_fetch_depth">3</prop>
            </props>
        </property>
    </bean>

    <!-- JPA annotations bean post processor -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

    <!-- TransactionManager -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager" autowire="byName">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- DAO Beans - manually configure the ones we need -->
    <bean id="demographicDao" class="ca.openosp.openo.commn.dao.DemographicDaoImpl" autowire="byName" />
    <bean id="ticklerDao" class="ca.openosp.openo.commn.dao.TicklerDaoImpl" autowire="byName" />
    <bean id="providerDao" class="ca.openosp.openo.dao.ProviderDaoImpl" autowire="byName" />

    <!-- Manager Beans - just create empty instances or mocks -->
    <bean id="ticklerManager" class="org.mockito.Mockito" factory-method="mock">
        <constructor-arg value="ca.openosp.openo.managers.TicklerManager" />
    </bean>

    <bean id="securityInfoManager" class="org.mockito.Mockito" factory-method="mock">
        <constructor-arg value="ca.openosp.openo.managers.SecurityInfoManager" />
    </bean>

</beans>