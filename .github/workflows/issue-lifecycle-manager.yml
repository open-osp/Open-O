name: Issue Lifecycle Manager

on:
  pull_request:
    types: [closed]
  issues:
    types: [closed, reopened]
  issue_comment:
    types: [created]
  workflow_dispatch: # Manual trigger to create labels
  push:
    branches: [main, develop, master] # Create labels on push to main branches

permissions:
  contents: read
  issues: write
  pull-requests: read
jobs:
  handle-pr-merge:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Handle PR merge and notify reporters
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const pr = context.payload.pull_request;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Get PR body and title
            const prBody = pr.body || '';
            const prTitle = pr.title || '';
            const prText = `${prTitle} ${prBody}`;

            // Find issue references
            const issuePattern = /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+#(\d+)/gi;
            const matches = [...prText.matchAll(issuePattern)];

            for (const match of matches) {
              const issueNumber = match[1];

              try {
                // Get issue details
                const issue = await github.rest.issues.get({
                  owner,
                  repo,
                  issue_number: issueNumber
                });

                // Don't auto-close issues marked as blockers
                const labels = issue.data.labels.map(l => l.name);
                const isBlocker = labels.includes('blocker');

                const issueAuthor = issue.data.user.login;
                const prMergedBy = pr.merged_by.login;

                // Create notification comment
                const comment = `## üîî Fix Has Been Merged

@${issueAuthor} - A fix for this issue has been merged!

**Pull Request:** #${pr.number} - ${pr.title}
**Merged by:** @${prMergedBy}
**Branch:** \`${pr.base.ref}\`

### Next Steps:
1. Once deployed, please verify the fix resolves your issue
2. If the issue is **resolved**, please:
   - ‚úÖ Comment "Verified fixed" or close this issue
3. If the issue **persists**, please:
   - ‚ùå Comment with details about what's still not working
   - Include any error messages or screenshots

${isBlocker ? '‚ö†Ô∏è **Note:** This is marked as a blocker. Please verify urgently once deployed.' : ''}

---
*Automated notification ‚Ä¢ Reply "stop notifications" to opt out of future updates*`;

                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: issueNumber,
                  body: comment
                });

                // Update labels
                const newLabels = ['status: pending-verification'];
                if (!isBlocker) {
                  // Remove needs-triage if present
                  if (labels.includes('status: needs-triage')) {
                    await github.rest.issues.removeLabel({
                      owner,
                      repo,
                      issue_number: issueNumber,
                      name: 'status: needs-triage'
                    });
                  }

                  // Add new status label if not already present
                  for (const label of newLabels) {
                    if (!labels.includes(label)) {
                      await github.rest.issues.addLabels({
                        owner,
                        repo,
                        issue_number: issueNumber,
                        labels: [label]
                      });
                    }
                  }
                }

              } catch (error) {
                console.error(`Error processing issue #${issueNumber}: ${error.message}`);
              }
            }

  handle-verification-comment:
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request == null
    runs-on: ubuntu-latest
    steps:
      - name: Check for verification keywords
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const comment = context.payload.comment;
            const issue = context.payload.issue;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Check if commenter is the issue author
            const isAuthor = comment.user.login === issue.user.login;

            // Check for verification keywords
            const commentBody = comment.body.toLowerCase();
            const verified = /\b(verified|fixed|resolved|works)\b/.test(commentBody);
            const notFixed = /\b(not fixed|still broken|persists|not working)\b/.test(commentBody);

            if (isAuthor) {
              if (verified && issue.state === 'open') {
                // Add verified label and close
                await github.rest.issues.update({
                  owner,
                  repo,
                  issue_number: issue.number,
                  state: 'closed',
                  state_reason: 'completed'
                });

                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number: issue.number,
                  labels: ['status: verified-fixed']
                });

                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: issue.number,
                  body: '‚úÖ Issue marked as verified and closed. Thank you for confirming!'
                });

              } else if (notFixed) {
                // Add needs-attention label
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number: issue.number,
                  labels: ['status: fix-failed']
                });

                // Mention the PR author who attempted the fix
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: issue.number,
                  body: '‚ö†Ô∏è The issue reporter indicates this is not fixed. Team has been notified for further investigation.'
                });
              }
            }

  create-status-labels:
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Create status labels if they don't exist
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const labelsToCreate = [
              {
                name: 'status: pending-verification',
                color: 'FFEB3B',
                description: 'Fix merged, waiting for issue reporter to verify'
              },
              {
                name: 'status: verified-fixed',
                color: '0E8A16',
                description: 'Issue reporter confirmed the fix works'
              },
              {
                name: 'status: fix-failed',
                color: 'B60205',
                description: 'Issue reporter confirmed the fix does not work'
              }
            ];

            for (const label of labelsToCreate) {
              try {
                await github.rest.issues.createLabel({
                  owner,
                  repo,
                  ...label
                });
                console.log(`Created label: ${label.name}`);
              } catch (error) {
                if (error.status === 422) {
                  console.log(`Label already exists: ${label.name}`);
                } else {
                  console.error(`Error creating label ${label.name}: ${error.message}`);
                }
              }
            }